bool isSafe(int row,int col,vector<string> &board){
    int n = board.size();
    int drow = row;
    int dcol = col;
    while(row>=0 && col>=0){
        if(board[row][col]=='Q') return false;
        row--;
        col--;
    }
    row = drow;
    col = dcol;
    while(row>=0 && col<=n){
        if(board[row][col]=='Q') return false;
        row--;
        col++;
    }

    row = drow;
    col = dcol;
    while(row>=0){
        if(board[row][col]=='Q') return false;
        row--;
    }

    return true;
}

void f(int row,vector<vector<string>> &ans,vector<string> &board,int n){
    if(row==n){
        ans.push_back(board);
        return;
    }

    for(int i = 0 ; i<n ; i++){
        if(isSafe(row,i,board)){
            board[row][i] = 'Q';
            f(row+1,ans,board,n);
            board[row][i] = '.';
        }
    }
}


vector<vector<int>> solveNQueens(int n) {
    // Write your code here
    vector<vector<string>> ans;
    vector<string> board;
    string s(n,'.');
    for(int i=0;i<n;i++){
        board.push_back(s);
    }
    f(0,ans,board,n);
    vector<vector<int>> v;
    for(int i =0;i<ans.size() ; i++){
        vector<int> a;
        vector<string> b=ans[i];
        for(int j = 0;j<n;j++){
            string s1 = b[j];
            for(int k=0;k<n;k++){
                if(s1[k]=='.') a.push_back(0);
                if(s1[k]=='Q') a.push_back(1);
            }
        }
        v.push_back(a);
    }

    return v;
}
