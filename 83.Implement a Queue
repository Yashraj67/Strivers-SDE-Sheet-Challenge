#include <bits/stdc++.h>

class Node{
    
    public:
    Node* next;
    int data;
    Node(int val){
        data = val;
    }
};

class Queue {
    Node* root;
    Node* last;
public:
    Queue() {
        // Implement the Constructor
        root = new Node(-1);
        root->next = NULL;
        last = root;
    }

    /*----------------- Public Functions of Queue -----------------*/

    bool isEmpty() {
        // Implement the isEmpty() function
        Node* n = root;

        if(root->next==NULL) return true;

        return false;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        Node* n = new Node(data);
        last->next = n;
        last = last->next;
    }

    int dequeue() {
        // Implement the dequeue() function
        if (root->next != NULL) {
            Node *n = root->next;
            int data = n->data;
            if(root->next->next!=NULL) root->next = n->next;
            else {root->next = NULL; last = root;}
            return data;                            
        }

        return -1;
         
    }

    int front() {
        // Implement the front() function
        if(root->next!=NULL) {
            return root->next->data;
        }

        return -1;
    }
};
