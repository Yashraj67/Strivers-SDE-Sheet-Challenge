/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */


struct Node{
    Node *arr[26];
    bool flag = false;

    bool isExist(char c){
        return arr[c-'a']!=NULL;
    }

    void addVal(char c,Node* n){
        arr[c-'a'] = n;
    }

    Node* get(char c){
        return arr[c-'a'];
    }

    void makeEnd(){
        flag = true;
    }

    bool isEnd(){
        return flag;
    }

};

class Trie {
    Node* root;
public:

    /** Initialize your data structure here. */
    Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* trie = root;
        for(int i=0;i<word.size();i++){
            if(!trie->isExist(word[i])){
                trie->addVal(word[i],new Node());
            }
            trie = trie->get(word[i]);
        }
        trie->makeEnd();

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* trie = root;
        for(int i=0;i<word.size();i++){
            if(!trie->isExist(word[i])){
                return false;
            }
            trie = trie->get(word[i]);
        }

        return trie->isEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* trie = root;
        for(int i=0;i<prefix.size();i++){
            if(!trie->isExist(prefix[i])){
                return false;
            }
            trie = trie->get(prefix[i]);
        }
        return true;
    }
};
